from aiogram import Router, F
from aiogram.types import CallbackQuery
from sqlalchemy import select, func
from keyboards.inline import get_main_menu
from database.base import get_session
from database.models import User, Payment

router = Router()


@router.callback_query(F.data == "referral")
async def show_referral_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"""
    tg_user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    session = await get_session()
    try:
        result = await session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
        total_referrals = await session.scalar(
            select(func.count(User.id)).where(User.referrer_id == user.id)
        )
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π (—É –∫–æ–≥–æ –µ—Å—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏)
        referrals_with_subscription = await session.scalar(
            select(func.count(func.distinct(User.id)))
            .select_from(User)
            .join(Payment, User.id == Payment.user_id)
            .where(User.referrer_id == user.id, Payment.status == "paid")
        )
        
        # –°—É–º–º–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ä–æ—á–∫–∏)
        from database.models import PaymentPlan
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ user_id + plan_id
        unique_subscriptions = await session.execute(
            select(Payment.user_id, Payment.plan_id)
            .select_from(User)
            .join(Payment, User.id == Payment.user_id)
            .where(User.referrer_id == user.id)
            .distinct()
        )
        
        # –ó–∞—Ç–µ–º —Å—É–º–º–∏—Ä—É–µ–º —Ü–µ–Ω—ã —ç—Ç–∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        total_referral_subscriptions = 0
        for user_id, plan_id in unique_subscriptions:
            plan_price = await session.scalar(
                select(PaymentPlan.price_total)
                .where(PaymentPlan.id == plan_id)
            )
            if plan_price:
                total_referral_subscriptions += plan_price
        
        # –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ (–ø–æ–∫–∞ –≤—Å–µ–≥–¥–∞ 0, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ)
        earned_rub = 0
        # 20% –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        total_rub = int(total_referral_subscriptions * 0.2)
        
    finally:
        await session.close()
    
    referral_text = (
        "üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ <b>20% —Å –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b> –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!\n\n"
        "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {total_referrals}\n"
        f"üí≥ –° –ø–æ–¥–ø–∏—Å–∫–æ–π: {referrals_with_subscription}\n"
        f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earned_rub}‚ÇΩ / {total_rub}‚ÇΩ\n\n"
        "üìã <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        "‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π\n"
        "‚Ä¢ –î—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è\n"
        "‚Ä¢ –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 20% –æ—Ç —Å—É–º–º—ã (–≤—ã–≤–µ—Å—Ç–∏ –∏—Ö –º–æ–∂–Ω–æ –ø–æ—Å–ª–µ –Ω–∞–±–æ—Ä–∞ 20% –±–∞–ª–ª–æ–≤ –¥—Ä—É–≥–æ–º)\n\n"
        "üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"<code>t.me/za_pivom_bot?start=ref{user.referral_code}</code>\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º!"
    )
    
    keyboard = [
        [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_main"}]
    ]
    
    await callback.message.edit_text(
        referral_text, 
        reply_markup={"inline_keyboard": keyboard},
        parse_mode="HTML"
    )
    await callback.answer()
