from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from keyboards.inline import get_main_menu, get_admin_menu
from conf import ADMIN_IDS
from middlewares.helpers import forward_bot_message_to_user_topic
from utils.config import get_remaining_places, get_max_places
from database.base import get_session
from database.models import User, Payment
from sqlalchemy import select, func

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
    session = await get_session()
    try:
        # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–µ –ø–ª–∞—Ç–µ–∂–∏)
        users_with_subscription = await session.scalar(
            select(func.count(func.distinct(User.id)))
            .select_from(User)
            .join(Payment, User.id == Payment.user_id)
            .where(Payment.status == "paid")
        ) or 0
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–µ—Å—Ç–∞
        remaining_places = get_remaining_places() - users_with_subscription
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Å—á–µ—Ç—á–∏–∫–æ–º –º–µ—Å—Ç
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        max_places = get_max_places()
        places_text = f"üî• –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {remaining_places}/{max_places}"
        if remaining_places <= 5:
            places_text += " ‚ö†Ô∏è"
        elif remaining_places <= 10:
            places_text += " ‚ö°"
            
    finally:
        await session.close()
    
    welcome_text = (
        f"{places_text}\n\n"
        "–ü—Ä–∏–≤–µ—Ç üëã\n\n"
        "–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∑–∞–∫—Ä—ã—Ç—å —Ñ–∏–∑—Ä—É –±–µ–∑ –Ω–µ—Ä–≤–æ–≤ –∏ –ø–æ—Ç–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–∏.\n"
        "–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞–±–µ—Ä–µ—Ç 100 –±–∞–ª–ª–æ–≤ —Å –Ω–∞–º–∏ –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —É—Å–∏–ª–∏—è—Ö."
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id in ADMIN_IDS:
        keyboard = get_admin_menu()
    else:
        keyboard = get_main_menu()
    
    sent = await message.answer(welcome_text, reply_markup=keyboard)
    # –ü–µ—Ä–µ—à–ª—ë–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≤ –õ–°)
    await forward_bot_message_to_user_topic(message.bot, sent, message.from_user.id)


@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
    session = await get_session()
    try:
        # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–µ –ø–ª–∞—Ç–µ–∂–∏)
        users_with_subscription = await session.scalar(
            select(func.count(func.distinct(User.id)))
            .select_from(User)
            .join(Payment, User.id == Payment.user_id)
            .where(Payment.status == "paid")
        ) or 0
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–µ—Å—Ç–∞
        remaining_places = get_remaining_places() - users_with_subscription
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Å—á–µ—Ç—á–∏–∫–æ–º –º–µ—Å—Ç
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        max_places = get_max_places()
        places_text = f"üî• –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {remaining_places}/{max_places}"
        if remaining_places <= 5:
            places_text += " ‚ö†Ô∏è"
        elif remaining_places <= 10:
            places_text += " ‚ö°"
            
    finally:
        await session.close()
    
    welcome_text = (
        f"{places_text}\n\n"
        "–ü—Ä–∏–≤–µ—Ç üëã\n\n"
        "–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∑–∞–∫—Ä—ã—Ç—å —Ñ–∏–∑—Ä—É –±–µ–∑ –Ω–µ—Ä–≤–æ–≤ –∏ –ø–æ—Ç–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–∏.\n"
        "–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞–±–µ—Ä–µ—Ç 100 –±–∞–ª–ª–æ–≤ —Å –Ω–∞–º–∏ –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —É—Å–∏–ª–∏—è—Ö."
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if callback.from_user.id in ADMIN_IDS:
        keyboard = get_admin_menu()
    else:
        keyboard = get_main_menu()
    
    await callback.message.edit_text(welcome_text, reply_markup=keyboard)
    await callback.answer()
