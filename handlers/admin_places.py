from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from conf import ADMIN_IDS
from utils.config import load_config, set_fake_occupied, get_remaining_places, get_max_places, set_max_places
from database.base import get_session
from database.models import User, Payment
from sqlalchemy import select, func
from loguru import logger

router = Router()


@router.message(Command("places"))
async def show_places_info(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–∞—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
    session = await get_session()
    try:
        # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–µ –ø–ª–∞—Ç–µ–∂–∏)
        users_with_subscription = await session.scalar(
            select(func.count(func.distinct(User.id)))
            .select_from(User)
            .join(Payment, User.id == Payment.user_id)
            .where(Payment.status == "paid")
        ) or 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        config = load_config()
        fake_occupied = config["fake_occupied"]
        max_places = config["max_places"]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–µ—Å—Ç–∞
        remaining_places = max_places - users_with_subscription - fake_occupied
        
        places_info = (
            f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–∞—Ö</b>\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: {users_with_subscription}\n"
            f"üé≠ –ù–∞–∫—Ä—É—á–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç: {fake_occupied}\n"
            f"üìà –ú–∞–∫—Å–∏–º—É–º –º–µ—Å—Ç: {max_places}\n"
            f"üî• –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {remaining_places}\n\n"
            f"<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            f"/set_fake &lt;—á–∏—Å–ª–æ&gt; - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–∫—Ä—É—Ç–∫—É\n"
            f"/set_max &lt;—á–∏—Å–ª–æ&gt; - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –º–µ—Å—Ç\n"
            f"/reset_fake - —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞–∫—Ä—É—Ç–∫—É"
        )
        
        await message.answer(places_info, parse_mode="HTML")
        
    finally:
        await session.close()


@router.message(Command("set_fake"))
async def set_fake_places(message: Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∫—Ä—É—á–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_fake <—á–∏—Å–ª–æ>")
            return
        
        fake_count = int(parts[1])
        if fake_count < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            return
        
        if fake_count > 20:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 20")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∫—Ä—É—Ç–∫—É
        set_fake_occupied(fake_count)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        session = await get_session()
        try:
            users_with_subscription = await session.scalar(
                select(func.count(func.distinct(User.id)))
                .select_from(User)
                .join(Payment, User.id == Payment.user_id)
                .where(Payment.status == "paid")
            ) or 0
            
            remaining_places = get_remaining_places() - users_with_subscription
            
            await message.answer(
                f"‚úÖ –ù–∞–∫—Ä—É—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {fake_count} –º–µ—Å—Ç\n"
                f"üî• –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {remaining_places}/20"
            )
            
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞–∫—Ä—É—Ç–∫—É: {fake_count} –º–µ—Å—Ç")
            
        finally:
            await session.close()
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∫—Ä—É—Ç–∫–∏: {e}")


@router.message(Command("reset_fake"))
async def reset_fake_places(message: Message):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞–∫—Ä—É—Ç–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∫—Ä—É—Ç–∫—É
        set_fake_occupied(0)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        session = await get_session()
        try:
            users_with_subscription = await session.scalar(
                select(func.count(func.distinct(User.id)))
                .select_from(User)
                .join(Payment, User.id == Payment.user_id)
                .where(Payment.status == "paid")
            ) or 0
            
            remaining_places = get_remaining_places() - users_with_subscription
            
            await message.answer(
                f"‚úÖ –ù–∞–∫—Ä—É—Ç–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞\n"
                f"üî• –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {remaining_places}/20"
            )
            
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —Å–±—Ä–æ—Å–∏–ª –Ω–∞–∫—Ä—É—Ç–∫—É")
            
        finally:
            await session.close()
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞–∫—Ä—É—Ç–∫–∏: {e}")


@router.message(Command("set_max"))
async def set_max_places_command(message: Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        args = message.text.split()
        if len(args) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_max &lt;—á–∏—Å–ª–æ&gt;")
            return
        
        new_max = int(args[1])
        if new_max < 1:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        session = await get_session()
        try:
            users_with_subscription = await session.scalar(
                select(func.count(func.distinct(User.id)))
                .select_from(User)
                .join(Payment, User.id == Payment.user_id)
                .where(Payment.status == "paid")
            ) or 0
            
            if new_max < users_with_subscription:
                await message.answer(
                    f"‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ ({users_with_subscription})"
                )
                return
            
            set_max_places(new_max)
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–µ—Å—Ç–∞
            config = load_config()
            fake_occupied = config["fake_occupied"]
            remaining_places = new_max - users_with_subscription - fake_occupied
            
            await message.answer(
                f"‚úÖ –ú–∞–∫—Å–∏–º—É–º –º–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_max}\n"
                f"üî• –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {remaining_places}/{new_max}"
            )
            
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –º–∞–∫—Å–∏–º—É–º –º–µ—Å—Ç: {new_max}")
            
        finally:
            await session.close()
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
