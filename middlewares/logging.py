from typing import Any, Awaitable, Callable, Dict
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, TelegramObject
from conf import LOGGING_SUPERGROUP_ID
from database.base import get_session
from database.models import User
from loguru import logger
from middlewares.helpers import send_referral_notification
from utils.referral import get_unique_referral_code, get_user_by_referral_code


class LoggingMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback'–∏ –∏–∑ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
        if isinstance(event, (Message, CallbackQuery)):
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º
            chat = event.chat if isinstance(event, Message) else event.message.chat
            if getattr(chat, "type", None) != "private":
                return await handler(event, data)
            try:
                user_id = event.from_user.id
                username = event.from_user.username
                first_name = event.from_user.first_name
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                session = await get_session()
                try:
                    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id, –∞ –Ω–µ –ø–æ id
                    from sqlalchemy import select
                    result = await session.execute(select(User).where(User.tg_id == user_id))
                    user = result.scalar_one_or_none()
                    
                    if not user:
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ UTM –º–µ—Ç–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
                        referrer_id = None
                        utm_source = None
                        if isinstance(event, Message) and event.text and event.text.startswith('/start'):
                            parts = event.text.split()
                            if len(parts) > 1:
                                start_param = parts[1]
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
                                if start_param.startswith('ref'):
                                    try:
                                        referral_code = start_param[3:]  # –£–±–∏—Ä–∞–µ–º "ref" –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                                        referrer_user = await get_user_by_referral_code(referral_code)
                                        if referrer_user:
                                            referrer_id = referrer_user.id
                                    except Exception:
                                        pass  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º UTM –º–µ—Ç–∫–∏
                                elif start_param.startswith('utm'):
                                    utm_source = start_param[3:]  # –£–±–∏—Ä–∞–µ–º "utm" –∏ –ø–æ–ª—É—á–∞–µ–º UTM –º–µ—Ç–∫—É
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        referral_code = await get_unique_referral_code()
                        user = User(
                            tg_id=user_id,
                            username=username,
                            first_name=first_name,
                            last_name=event.from_user.last_name,
                            referrer_id=referrer_id,
                            referral_code=referral_code,
                            utm_source=utm_source
                        )
                        session.add(user)
                        await session.commit()
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                        if (user.username != username or 
                            user.first_name != first_name or 
                            user.last_name != event.from_user.last_name):
                            user.username = username
                            user.first_name = first_name
                            user.last_name = event.from_user.last_name
                            await session.commit()
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await self._update_user_pinned_message(event, user)
                    
                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await self._forward_to_user_topic(event, user)
                finally:
                    await session.close()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ LoggingMiddleware: {e}")
        
        return await handler(event, data)
    
    async def _create_user_topic(self, event: TelegramObject, user: User) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ"""
        try:
            bot = event.bot
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É
            topic_name = f"@{user.username}" if user.username else f"ID: {user.tg_id}"
            topic = await bot.create_forum_topic(
                chat_id=LOGGING_SUPERGROUP_ID,
                name=topic_name
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (plain text)
            user_info = (
                f"ID: {user.tg_id}\n"
                f"Username: @{user.username or '–ù–µ—Ç'}\n"
                f"–ò–º—è: {user.first_name or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} {user.last_name or ''}"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º UTM –º–µ—Ç–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
            if user.utm_source:
                user_info += f"\nüìä UTM: {user.utm_source}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if user.referrer_id:
                session = await get_session()
                try:
                    from sqlalchemy import select
                    referrer_result = await session.execute(select(User).where(User.id == user.referrer_id))
                    referrer = referrer_result.scalar_one_or_none()
                    if referrer:
                        referrer_name = f"{referrer.first_name or ''} {referrer.last_name or ''}".strip()
                        if not referrer_name:
                            referrer_name = f"@{referrer.username}" if referrer.username else f"ID: {referrer.tg_id}"
                        user_info += f"\n\nüéÅ –ü—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç: {referrer_name}"
                finally:
                    await session.close()
            
            message = await bot.send_message(
                chat_id=LOGGING_SUPERGROUP_ID,
                text=user_info,
                message_thread_id=topic.message_thread_id
            )
            
            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.pin_chat_message(
                chat_id=LOGGING_SUPERGROUP_ID,
                message_id=message.message_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–º—ã –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            session = await get_session()
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                from sqlalchemy import update
                await session.execute(
                    update(User)
                    .where(User.tg_id == user.tg_id)
                    .values(
                        topic_id=topic.message_thread_id,
                        pinned_message_id=message.message_id
                    )
                )
                await session.commit()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏
                user.topic_id = topic.message_thread_id
                user.pinned_message_id = message.message_id
            finally:
                await session.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.tg_id}: {e}")
    
    async def _update_user_pinned_message(self, event: TelegramObject, user: User) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not user.topic_id or not user.pinned_message_id:
                return
                
            bot = event.bot
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (plain text)
            user_info = (
                f"ID: {user.tg_id}\n"
                f"Username: @{user.username or '–ù–µ—Ç'}\n"
                f"–ò–º—è: {user.first_name or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} {user.last_name or ''}"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º UTM –º–µ—Ç–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
            if user.utm_source:
                user_info += f"\nüìä UTM: {user.utm_source}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if user.referrer_id:
                session = await get_session()
                try:
                    from sqlalchemy import select
                    referrer_result = await session.execute(select(User).where(User.id == user.referrer_id))
                    referrer = referrer_result.scalar_one_or_none()
                    if referrer:
                        referrer_name = f"{referrer.first_name or ''} {referrer.last_name or ''}".strip()
                        if not referrer_name:
                            referrer_name = f"@{referrer.username}" if referrer.username else f"ID: {referrer.tg_id}"
                        user_info += f"\n\nüéÅ –ü—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç: {referrer_name}"
                finally:
                    await session.close()
            
            await bot.edit_message_text(
                chat_id=LOGGING_SUPERGROUP_ID,
                message_id=user.pinned_message_id,
                text=user_info
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.tg_id}: {e}")
    
    async def _forward_to_user_topic(self, event: TelegramObject, user: User) -> None:
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            bot = event.bot
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–µ–º—ã, —Å–æ–∑–¥–∞–µ–º –µ—ë –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            if not user.topic_id:
                await self._create_user_topic(event, user)
                # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
                session = await get_session()
                try:
                    from sqlalchemy import select
                    result = await session.execute(select(User).where(User.tg_id == user.tg_id))
                    user = result.scalar_one()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if user.referrer_id:
                        referrer_result = await session.execute(select(User).where(User.id == user.referrer_id))
                        referrer_user = referrer_result.scalar_one_or_none()
                        if referrer_user:
                            await send_referral_notification(event.bot, referrer_user, user)
                finally:
                    await session.close()
            
            if user.topic_id:
                if isinstance(event, Message):
                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await bot.forward_message(
                        chat_id=LOGGING_SUPERGROUP_ID,
                        from_chat_id=event.chat.id,
                        message_id=event.message_id,
                        message_thread_id=user.topic_id
                    )
                elif isinstance(event, CallbackQuery):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ callback'–µ
                    callback_text = f"<–∫–ª–∏–∫–Ω—É–ª \"{event.data}\">"
                    await bot.send_message(
                        chat_id=LOGGING_SUPERGROUP_ID,
                        text=callback_text,
                        message_thread_id=user.topic_id
                    )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.tg_id}: {e}")
